ㅎㅇ clock() 수
ㅎㅇ rand() 수

//정수 1천만개 정렬 시간: 681ms
배열크기 = 10000000
배열: 수[10000000]

ㅎㅇ 치환(ㄱ: 수, ㄴ: 수):
    임시 = 배열[ㄱ]
    배열[ㄱ] = 배열[ㄴ]
    배열[ㄴ] = 임시

ㅎㅇ 파티셔닝(피봇: 수, 왼쪽: 수, 오른쪽: 수) 수:
    ㄱㄱ :
        ㄱㄱ :
            왼쪽 += 1
            ㅇㅈ? 배열[왼쪽] >= 배열[피봇]:
                ㅅㄱ
        ㄱㄱ :
            오른쪽 -= 1
            ㅇㅈ? 배열[오른쪽] <= 배열[피봇]:
                ㅅㄱ
        ㅇㅈ? 오른쪽 <= 왼쪽:
            치환(오른쪽, 피봇)
            ㅈㅈ 오른쪽
        치환(오른쪽, 왼쪽)


ㅎㅇ 퀵정렬(시작: 수, 끝: 수) :
    ㅇㅈ? 시작 + 1 >= 끝:
        ㅈㅈ

    피봇 = 파티셔닝(시작, 시작, 끝)

    퀵정렬(시작, 피봇)
    퀵정렬(피봇 + 1, 끝)

ㅎㅇ 시작() 수:
    ㄱㄱ 번호 = 0; 번호 < 배열크기; 번호 += 1:
        배열[번호] = rand()

    시작시간 = clock()

    퀵정렬(0, 배열크기)

    종료시간 = clock()

    ㄱㄱ 번호 = 0; 번호 < 배열크기; 번호 += 1:
        출(배열[번호])

    출((종료시간 - 시작시간), "ms")